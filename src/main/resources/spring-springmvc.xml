<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <!-- 开启注解扫描 -->
    <context:annotation-config />

    <!-- 设置注解扫描的package -->
    <context:component-scan base-package="com.igoer.springmvc.controller"/>
    <context:component-scan base-package="com.igoer.springmvc.entity"/>

    <!--&lt;!&ndash; 处理在类级别上的@RequestMapping注解 &ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->

    <!--&lt;!&ndash; 处理在方法级别上的@RequestMapping注解  &ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
        <!--&lt;!&ndash;-->
            <!--配置 json 返回处理, 这里使用 Alibaba 的 fastJson,-->
            <!--SpringMVC 默认使用 Jackson 这个开源的第三方类库, 需要 jackson-core, jackson-mapper jar包支持-->
        <!--&ndash;&gt;-->
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<ref bean="fastJsonConverter" />-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="webBindingInitializer">-->
            <!--<bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">-->
                <!--<property name="conversionService">-->
                    <!--<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean"></bean>-->
                <!--</property>-->
            <!--</bean>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; fastJson &ndash;&gt;-->
    <!--<bean id="fastJsonConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">-->
    <!--<property name="supportedMediaTypes">-->
    <!--<list>-->
    <!--<value>>application/json;charset=UTF-8</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--
        mvc:annotation-driven 标签会自动注册如下3个bean
        1、用于处理类级别上的 @RequestMapping
        org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping

        2、用于处理方法级别上的 @RequestMapping
        org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter

        3、用于处理 @ExceptionHandler 异常信息
        org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver

        当然也可以自己实现 org.springframework.web.servlet.HandlerExceptionResolver 接口
        public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
        来自定义对异常的处理需求
    -->
    <mvc:annotation-driven>
        <!-- 配置转换器 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- 配置 jsp 视图渲染器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--
        静态资源处理
        SpringMVC 会定义一个 DefaultServletHttpRequestHandler, 它会对DispatcherServlet注册的请求进行筛查
        如果请求没有经过映射, 就将该请求直接交由 WEB 应用服务器默认的 Servlet 处理
        如果不是静态资源的请求, 才由 DispatcherServlet 继续处理
    -->
    <mvc:default-servlet-handler/>

    <!--
        静态资源处理
        可以直接通过 mvc:resources 标签来设置静态资源的目录, 如下就设置 /static 目录为静态资源目录
        该标签可以多次配置, 配置不同的静态资源目录
    -->
    <mvc:resources location="/static/" mapping="/static/**"/>

    <!--<mvc:interceptors>-->
        <!--<bean class=""></bean>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/admin"/>-->
            <!--<bean class=""></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->


</beans>